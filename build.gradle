import org.springframework.boot.gradle.tasks.run.BootRun

buildscript {
    ext {
        springBootVersion = '2.3.11.RELEASE'
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.4.34")
        classpath group: 'org.sonarsource.scanner.gradle', name: 'sonarqube-gradle-plugin', version: '3.0'
    }
}

plugins {
    id 'au.com.dius.pact' version '4.1.0'
    id 'application'
    id 'checkstyle'
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'io.franzbecker.gradle-lombok' version '4.0.0'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id "info.solidsoft.pitest" version "1.5.1"
    id 'jacoco'
    id 'org.owasp.dependencycheck' version '6.2.2'
    id 'org.sonarqube' version '3.0'
    id 'org.springframework.boot' version '2.3.11.RELEASE'
    id 'net.ltgt.apt' version '0.21'
}

apply plugin: 'au.com.dius.pact'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'org.sonarqube'
apply plugin: 'org.springframework.boot'
apply plugin: 'net.serenity-bdd.aggregator'

group = 'uk.gov.hmcts.reform.finrem'
version = '0.0.1'
mainClassName = 'uk.gov.hmcts.reform.finrem.caseorchestration.CaseOrchestrationApplication'
sourceCompatibility = 11
targetCompatibility = 11

repositories {
    jcenter()
    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    maven { url 'https://repo.spring.io/libs-milestone' }
}

sourceSets {
    testSmoke {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }

    test {
        java.srcDir 'src/test/java'
        resources.srcDir 'src/test/resources'
    }

    functional {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDirs = ['src/functionalTests/java']
        }
        resources {
            srcDirs = ['src/functionalTests/resources']
        }
    }

    contract {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDirs = ['src/contractTests/java']
        }
        resources.srcDir file('src/contractTest/resources')
    }


}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/integrationTest/java')
        }
        resources {
            srcDir('src/integrationTest/resources')
        }
    }
}

configurations {
    functionalCompile.extendsFrom testCompile
    functionalRuntime.extendsFrom testRuntime
}

def versions = [
        bspCommonLib         : '0.0.47',
        ccdClient            : '4.7.3',
        commonsBeanUtils     : '1.9.4',
        commonsIo            : '2.7',
        commonsLang3         : '3.11',
        gradlePitest         : '1.5.1',
        jsonAssert           : '1.2.3',
        junit                : '4.13.1',
        lombok               : '1.18.12',
        mockito              : '3.4.4',
        nimbus               : '5.1',
        pact_version         : '4.1.11',
        pdfbox               : '2.0.8',
        pitest               : '1.5.2',
        powerMock            : '1.7.3',
        reformLogging        : '5.1.5',
        restAssured          : '3.0.3',
        serenity             : '2.2.12',
        serenityCucumber     : '1.9.51',
        serviceTokenGenerator: '3.1.1',
        springfoxSwagger     : '2.9.2',
        sonarPitest          : '0.5',
        tomcat               : '9.0.43',
        wiremock             : '2.27.2'
]

dependencyManagement {
    dependencies {
        dependency group: 'com.google.guava', name: 'guava', version: '30.1-jre'
        dependency group: 'commons-beanutils', name: 'commons-beanutils', version: versions.commonsBeanUtils
        dependency group: 'junit', name: 'junit', version: '4.13.1'
        dependency group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.61'
        dependencySet(group: 'org.apache.tomcat.embed', version: versions.tomcat) {
            entry 'tomcat-embed-core'
            entry 'tomcat-embed-el'
            entry 'tomcat-embed-websocket'
        }
        dependencySet(group: 'org.codehaus.groovy', version: '2.5.14') {
            entry 'groovy'
            entry 'groovy-json'
        }
        dependencySet(group: 'org.apache.httpcomponents', version: '4.5.13') {
            entry 'httpclient'
            entry 'fluent-hc'
        }
        dependencySet(group: 'org.eclipse.jetty', version: '9.4.35.v20201120') {
            entry 'jetty-client'
            entry 'jetty-continuation'
            entry 'jetty-http'
            entry 'jetty-security'
            entry 'jetty-server'
            entry 'jetty-servlet'
            entry 'jetty-servlets'
            entry 'jetty-util'
            entry 'jetty-util-ajax'
            entry 'jetty-webapp'
            entry 'jetty-xml'
        }
        // prototype pollution vulnerability in handlebars
        dependency group: 'com.github.jknack', name: 'handlebars', version: '4.2.0'
    }
}

dependencies {
    implementation group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '2.3.3'
    implementation group: 'com.jayway.jsonpath', name: 'json-path-assert', version: versions.jsonPathAssert
    implementation group: 'commons-io', name: 'commons-io', version: versions.commonsIo
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    implementation group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: versions.sonarPitest
    implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
    implementation group: 'uk.gov.hmcts.reform', name: 'bsp-common-lib', version: versions.bspCommonLib
    implementation group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: versions.ccdClient
    implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-spring', version: versions.reformLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.serviceTokenGenerator
    implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.1.0'

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.13.3'

    runtimeOnly group: 'org.springframework.boot', name: 'spring-boot-devtools'
    runtimeOnly group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    runtimeOnly group: 'org.springframework.boot', name: 'spring-boot-starter-web'

    testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: versions.wiremock
    testImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'

    testSmokeImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    testSmokeImplementation sourceSets.main.runtimeClasspath
    testSmokeImplementation sourceSets.test.runtimeClasspath

    functionalImplementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    functionalImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    functionalImplementation group: 'junit', name: 'junit', version: versions.junit
    functionalImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    functionalImplementation group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
    functionalImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    functionalImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    functionalImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    functionalImplementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    functionalImplementation group: 'org.mockito', name: 'mockito-core', version: versions.mockito
    functionalImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    functionalImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
    functionalImplementation group: 'org.pdfbox', name: 'com.springsource.org.pdfbox', version: '0.7.3'
    functionalImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    functionalImplementation group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'
    functionalImplementation group: 'uk.gov.hmcts.reform', name: 'bsp-common-lib', version: versions.bspCommonLib
    functionalImplementation group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: versions.ccdClient
    functionalImplementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.serviceTokenGenerator

    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    functionalAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    contractCompile group: 'au.com.dius.pact.consumer', name: 'junit', version: versions.pact_version
    contractCompile group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
    contractRuntime group: 'au.com.dius.pact.consumer', name: 'junit', version: versions.pact_version
    contractRuntime group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version

    contractCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'

    contractImplementation sourceSets.main.runtimeClasspath
    contractImplementation sourceSets.test.runtimeClasspath
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

checkstyle.toolVersion = '8.32'
checkstyle.configFile = new File(rootDir, "checkstyle.xml")
checkstyle.maxWarnings(0)

// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.6"
}

jacocoTestReport {
    executionData(test)

    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

def sonarExclusions = ['**/uk/gov/hmcts/reform/finrem/caseorchestration/config/**',
                       '**/uk/gov/hmcts/reform/finrem/caseorchestration/model/**',
                       '**/uk/gov/hmcts/reform/finrem/caseorchestration/error/**',
                       '**/uk/gov/hmcts/reform/finrem/caseorchestration/ccd/datamigration/model/**',
                       '**/uk/gov/hmcts/reform/finrem/caseorchestration/CaseOrchestrationApplication']

sonarqube {
    properties {
        property "sonar.projectKey", "finrem-case-orchestration"
        property "sonar.exclusions", sonarExclusions.join(', ')
        property "sonar.dynamicAnalysis", "reuseReports"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
        property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
    }
}

pitest {
    targetClasses.set(['uk.gov.hmcts.reform.finrem.caseorchestration.*'])
    excludedClasses.set(['uk.gov.hmcts.reform.finrem.caseorchestration.CaseOrchestrationApplication',
                         'uk.gov.hmcts.reform.finrem.caseorchestration.model.*',
                         'uk.gov.hmcts.reform.finrem.caseorchestration.config.*',
                         'uk.gov.hmcts.reform.finrem.caseorchestration.controllers.PaymentByAccountStub'])
    threads.set(4)
    outputFormats.set(['XML', 'HTML'])
    timestampedReports.set(false)
    mutationThreshold.set(80)
}

compileJava.dependsOn(processResources)
build.dependsOn jacocoTestReport

bootJar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
    archiveFileName = 'finrem-case-orchestration.jar'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

pact {
    publish {
        pactDirectory = 'pacts'
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
        tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
        version = versions.pact_version
    }
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    testClassesDirs = sourceSets.testSmoke.output.classesDirs
    classpath = sourceSets.testSmoke.runtimeClasspath
    finalizedBy aggregate
}

task bootRunAat(type: BootRun, description: 'Runs the app using AAT config', dependsOn: 'classes', group: 'Application') {
    main = bootJar.mainClassName
    doFirst() {
        classpath = sourceSets.main.runtimeClasspath
        systemProperties = System.properties
        systemProperty 'spring.profiles.active', 'aat'

        //Proxy configuration
        systemProperty 'http.proxyHost', 'proxyout.reform.hmcts.net'
        systemProperty 'http.proxyPort', '8080'
        systemProperty 'https.proxyHost', 'proxyout.reform.hmcts.net'
        systemProperty 'https.proxyPort', '8080'
    }
}

task functional(type: Test) {
    description = "Runs functional Tests"
    setTestClassesDirs(sourceSets.functional.output.classesDirs)
    setClasspath(sourceSets.functional.runtimeClasspath)
    finalizedBy aggregate
}

task contractTest(type: Test) {
    group = 'Delivery pipeline'
    description = 'Runs the consumer Pact tests'
    setTestClassesDirs(sourceSets.contract.output.classesDirs)
    setClasspath(sourceSets.contract.runtimeClasspath)
    systemProperty 'pact.rootDir', "pacts"
}

project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}

task runAndPublishConsumerPactTests(type: Test){
    logger.lifecycle("Runs pact Tests")
    testClassesDirs = sourceSets.contract.output.classesDirs
    classpath = sourceSets.contract.runtimeClasspath

}

runAndPublishConsumerPactTests.dependsOn contractTest

runAndPublishConsumerPactTests.finalizedBy pactPublish

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}


