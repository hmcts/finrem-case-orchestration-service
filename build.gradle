buildscript {
    ext {
        springBootVersion = '2.1.3.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "http://repo1.maven.org/maven2/" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath group: 'org.sonarsource.scanner.gradle', name: 'sonarqube-gradle-plugin', version: '2.6.2'
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.0.42")
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'io.spring.dependency-management' version '1.0.6.RELEASE'
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'jacoco'
    id 'net.ltgt.apt' version '0.10'
    id 'io.franzbecker.gradle-lombok' version '1.14'
    id 'org.owasp.dependencycheck' version '5.1.0'
    id 'org.sonarqube' version '2.7.1'
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id 'pmd'
    id "info.solidsoft.pitest" version "1.3.0"
    id 'au.com.dius.pact' version '3.5.24'

}


apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.sonarqube'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'jacoco'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'au.com.dius.pact'



group = 'uk.gov.hmcts.reform.finrem'
version = '0.0.1'
mainClassName = 'uk.gov.hmcts.reform.finrem.caseorchestration.CaseOrchestrationApplication'
sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
    mavenLocal()
    jcenter()
    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url 'https://repo.spring.io/libs-milestone' }
}


sourceSets {
    testSmoke {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }

    test {
        java.srcDir 'src/test/java'
        resources.srcDir 'src/test/resources'
    }

    functional {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDirs = ['src/functionalTests/java']


        }
        resources {
            srcDirs = ['src/functionalTests/resources']
        }

    }

    contract {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDirs = ['src/contractTests/java']


        }
        resources {
            srcDirs = ['src/contractTests/resources']
        }

    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/integrationTest/java')
        }
        resources {
            srcDir('src/integrationTest/resources')
        }
    }
}

configurations {
    functionalCompile.extendsFrom testCompile
    functionalRuntime.extendsFrom testRuntime
}

def versions = [
        lombokVersion           : '1.16.18',
        springfoxSwagger        : '2.9.2',
        commonsIo               : '2.5',
        feignHttpClient         : '9.5.1',
        wiremockVersion         : '2.25.0',
        reformsJavaLogging      : '5.0.1',
        serviceTokenGenerator   : '3.0.0',
        commonsLang3            : '3.9',
        jsonAssert              : '1.2.3',
        junit                   : '4.12',
        nimbus                  : '5.1',
        pdfbox                  : '2.0.8',
        mockito                 : '2.8.9',
        powerMock               : '1.7.3',
        puppyCrawl              : '7.6',
        restAssured             : '3.0.3',
        serenity                : '2.0.11',
        serenityCucumber        : '1.1.3',
        springBoot              : '2.1.3.RELEASE',
        springOpenFeign         : '2.0.0.RELEASE',
        springHateoas           : '0.24.0.RELEASE',
        unirest                 : '1.4.9',
        pitest                  : '1.3.2',
        gradlePitest            : '1.4.0',
        sonarPitest             : '0.5',
        ccdClient               : '4.3.1',
        commonsBeanUtils                : '1.9.4',
        pact_version                    : '3.5.24'

]

dependencyManagement {
    dependencies {
        // CVE-2019-0232, CVE-2019-0199 - command line injections on windows
        dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.19') {
            entry 'tomcat-embed-core'
            entry 'tomcat-embed-el'
            entry 'tomcat-embed-websocket'
        }

        // solves CVE-2019-12086
        // remove once spring manager incorporates this changes
        dependencySet(
                group: 'com.fasterxml.jackson.core',
                version: '2.9.9'
                //version: dependencyManagement.importedProperties['jackson.version'] solves CVE-2019-12086
        ) {
            entry 'jackson-core'
            entry 'jackson-databind'
        }
        dependency group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    }
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-configuration-processor")
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: versions.reformsJavaLogging
    compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0'
    compile group: 'org.projectlombok', name: 'lombok', version: versions.lombokVersion
    compile group: 'commons-io', name: 'commons-io', version: versions.commonsIo
    compile(group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger)
    compile (group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger)
    compile group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: '4.6.0'
    compile (group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '2.0.1.RELEASE')
            {
                exclude group: 'io.reactivex', module: 'io.reactivex'
                exclude group: 'io.reactivex', module: 'rxnetty'
                exclude group: 'io.reactivex', module: 'rxnetty-contexts'
                exclude group: 'io.reactivex', module: 'rxnetty-servo'
            }

    compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.serviceTokenGenerator
    compile group: 'io.github.openfeign', name: 'feign-httpclient', version: versions.feignHttpClient
    compile group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    compile group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: versions.ccdClient
    compile group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version:'0.0.5'
    compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version:'0.0.4'

    compile group: 'com.jayway.jsonpath', name:'json-path-assert', version: versions.jsonPathAssert
    compile group: 'org.pitest', name: 'pitest', version: versions.pitest
    compile group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: versions.gradlePitest
    compile group: 'org.codehaus.sonar-plugins', name:'sonar-pitest-plugin', version: versions.sonarPitest

    compile (group: 'commons-beanutils', name: 'commons-beanutils', version: versions.commonsBeanUtils) {
        force = true
    }

    runtime('org.springframework.boot:spring-boot-devtools')

    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
        exclude(module: 'commons-logging')
        exclude(module: 'android-json')
    }
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile group: 'com.github.tomakehurst', name:'wiremock', version: versions.wiremockVersion
    testCompile group: 'org.projectlombok', name: 'lombok', version: versions.lombokVersion

    testSmokeCompile group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    testSmokeCompile sourceSets.main.runtimeClasspath
    testSmokeCompile sourceSets.test.runtimeClasspath

    functionalCompile group: 'junit', name: 'junit', version: versions.junit
    functionalCompile group: 'net.serenity-bdd', name: 'serenity-core', version: '2.0.11'
    functionalCompile group: 'net.serenity-bdd', name: 'serenity-junit', version: '2.0.11'
    functionalCompile group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: '2.0.11'
    functionalCompile group: 'net.serenity-bdd', name: 'serenity-spring', version: '2.0.11'
    functionalCompile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.0'
    functionalCompile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '1.0.4'
    functionalCompile group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    functionalCompile group: 'junit', name: 'junit', version: versions.junit
    functionalCompile group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
    functionalCompile group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    functionalCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    functionalCompile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    functionalCompile group: 'org.pdfbox', name: 'com.springsource.org.pdfbox', version: '0.7.3'
    functionalCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'
    functionalCompile group: 'org.projectlombok', name: 'lombok', version: versions.lombokVersion

    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    contractCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testCompile  group: 'au.com.dius', name: 'pact-jvm-provider-spring_2.12', version: versions.pact_version
    contractCompile  group: 'au.com.dius', name: 'pact-jvm-provider-spring_2.12', version: versions.pact_version
    contractCompile group: 'au.com.dius', name: 'pact-jvm-consumer-junit5_2.12', version: versions.pact_version
    contractCompile group: 'au.com.dius', name: 'pact-jvm-consumer-java8_2.12', version: versions.pact_version
    contractCompile("org.junit.jupiter:junit-jupiter-api:5.3.2")
    contractCompile("org.junit.jupiter:junit-jupiter-engine:5.3.2")
    contractImplementation('org.junit.jupiter:junit-jupiter-api:5.3.2')
    contractCompile sourceSets.main.runtimeClasspath
    contractCompile sourceSets.test.runtimeClasspath
}
def sonarExclusions = ['**/uk/gov/hmcts/reform/finrem/caseorchestration/config/**',
                       '**/uk/gov/hmcts/reform/finrem/caseorchestration/model/**',
                       '**/uk/gov/hmcts/reform/finrem/caseorchestration/ccd/datamigration/model/**',
                       '**/uk/gov/hmcts/reform/finrem/caseorchestration/CaseOrchestrationApplication']

sonarqube {
    println "echo sonarqube"
    properties {
        property "sonar.exclusions", sonarExclusions.join(', ')
        property "sonar.projectKey", "finrem-case-orchestration"
        property "sonar.dynamicAnalysis", "reuseReports"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
        property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
}

checkstyle.toolVersion = '7.2'
checkstyle.configFile = new File(rootDir, "checkstyle.xml")

// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

pmd {
    toolVersion = "6.5.0"
    ignoreFailures = true
    sourceSets = [sourceSets.main, sourceSets.test]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("ruleset.xml")
}

jacocoTestReport {
    executionData(test)

    reports {
        xml {
            enabled true
        }

        html {
            enabled true
        }
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

pitest {
    targetClasses = ['uk.gov.hmcts.reform.finrem.caseorchestration.*']
    excludedClasses = ['uk.gov.hmcts.reform.finrem.caseorchestration.CaseOrchestrationApplication',
                       'uk.gov.hmcts.reform.finrem.caseorchestration.model.*',
                       'uk.gov.hmcts.reform.finrem.caseorchestration.config.*',
                       'uk.gov.hmcts.reform.finrem.caseorchestration.controllers.PaymentByAccountStub']
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 80
}

compileJava.dependsOn(processResources)
build.dependsOn jacocoTestReport

bootJar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
    archiveName 'finrem-case-orchestration.jar'
}

pact {
    publish {
        pactDirectory = 'target/pacts'
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?:'http://localhost:80'
        tags = [System.getenv("PACT_BRANCH_NAME") ?:'Dev']
        version = versions.pact_version
    }
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    testClassesDirs = sourceSets.testSmoke.output.classesDirs
    classpath = sourceSets.testSmoke.runtimeClasspath
    finalizedBy aggregate
}

task functional(type: Test) {
    description = "Runs functional Tests"
    setTestClassesDirs(sourceSets.functional.output.classesDirs)
    setClasspath(sourceSets.functional.runtimeClasspath)
    finalizedBy aggregate
}

task contractTest(type: Test) {
    description = "Runs Contract Tests"
    setTestClassesDirs(sourceSets.contract.output.classesDirs)
    setClasspath(sourceSets.contract.runtimeClasspath)
    finalizedBy aggregate
}

