plugins {
    id 'application'
    id 'checkstyle'
    id 'jacoco'
    id 'org.springframework.boot' version "2.7.1"
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'au.com.dius.pact' version '4.4.0-beta.2'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id "info.solidsoft.pitest" version "1.5.1"
    id 'org.owasp.dependencycheck' version '6.5.3'
    id 'org.sonarqube' version '3.3'
    id "net.serenity-bdd.serenity-gradle-plugin" version "3.2.5"
    id 'com.github.hmcts.rse-cft-lib' version '0.19.202'
}

def versions = [
    bspCommonLib         : '0.0.50',
    ccdClient            : '4.8.6',
    commonsBeanUtils     : '1.9.4',
    commonsIo            : '2.7',
    commonsLang3         : '3.11',
    junit                : '4.13.1',
    lombok               : '1.18.22',
    mockito              : '3.4.4',
    pact_version         : '4.1.11',
    pdfbox               : '2.0.25',
    reformLogging        : '5.1.5',
    serenity             : '3.2.5',
    serviceTokenGenerator: '3.1.1',
    springDoc            : '1.6.9',
    sonarPitest          : '0.5',
    wiremock             : '2.27.2',
    apacheLogging        : '2.17.1',
    idamClient           : '2.0.1',
    jjwt                 : '0.9.1',
    skyscreamer          : '1.5.0',
    propVolumeStarter    : '0.0.4',
    openfeign            : '11.6',
    openfeignForm        : '3.8.0',
    jaxbOsgi             : '2.3.3'
]

project.ext {
    pactVersion = getCheckedOutGitCommitHash()
    springCloudBomVersion = "2021.0.3"
    restAssuredBomVersion = "5.1.1"
}

group = 'uk.gov.hmcts.reform.finrem'
version = '0.0.1'
mainClassName = 'uk.gov.hmcts.reform.finrem.caseorchestration.CaseOrchestrationApplication'

compileJava.dependsOn processResources
build.dependsOn jacocoTestReport

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

sourceSets {
    testSmoke {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }

    test {
        java.srcDir 'src/test/java'
        resources.srcDir 'src/test/resources'
    }

    functional {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDirs = ['src/functionalTests/java']
        }
        resources {
            srcDirs = ['src/functionalTests/resources']
        }
    }

    contract {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDirs = ['src/contractTests/java']
        }
        resources.srcDir file('src/contractTest/resources')
    }

    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/integrationTest/java')
        }
        resources {
            srcDir('src/integrationTest/resources')
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://jitpack.io" }
}

configurations {
    functionalImplementation.extendsFrom testImplementation
    functionalRuntimeOnly.extendsFrom testRuntimeOnly
    cftlibRuntimeClasspath.extendsFrom runtimeClasspath
}

processTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

test {
    failFast = true
}

// before committing a change, make sure task still works
dependencyUpdates {
    def isNonStable = { String version ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
        def regex = /^[0-9,.v-]+$/
        return !stableKeyword && !(version ==~ regex)
    }
    rejectVersionIf { selection -> // <---- notice how the closure argument is named
        return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/dependency-check-suppressions.xml'
    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
    skipConfigurations = [
        "checkstyle",
        "compileOnly",
        "pmd",
        "integrationTest",
        "functionalTest",
        "smokeTest",
        "contractTestRuntimeClasspath",
        "contractTestCompileClasspath"
    ]
}

checkstyle {
    maxWarnings = 0
    toolVersion = '9.2.1'
    getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

jacocoTestReport {
    //TODO: add integration, eg executionData(test, integration)
    executionData(test)
    reports {
        xml.required = true
        csv.required = false
        xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
sonarqube {
    def sonarExclusions = ['**/uk/gov/hmcts/reform/finrem/caseorchestration/config/**',
                           '**/uk/gov/hmcts/reform/finrem/caseorchestration/model/**',
                           '**/uk/gov/hmcts/reform/finrem/caseorchestration/error/**',
                           '**/uk/gov/hmcts/reform/finrem/caseorchestration/ccd/datamigration/model/**',
                           '**/uk/gov/hmcts/reform/finrem/caseorchestration/CaseOrchestrationApplication']

    properties {
        property "sonar.projectKey", "finrem-case-orchestration"
        property "sonar.exclusions", sonarExclusions.join(', ')
        property "sonar.dynamicAnalysis", "reuseReports"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
        property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
    }
}

pitest {
    targetClasses.set(['uk.gov.hmcts.reform.finrem.caseorchestration.*'])
    excludedClasses.set(['uk.gov.hmcts.reform.finrem.caseorchestration.CaseOrchestrationApplication',
                         'uk.gov.hmcts.reform.finrem.caseorchestration.model.*',
                         'uk.gov.hmcts.reform.finrem.caseorchestration.config.*',
                         'uk.gov.hmcts.reform.finrem.caseorchestration.controllers.PaymentByAccountStub',
                         'uk.gov.hmcts.reform.finrem.caseorchestration.service.IdamAuthService'])
    threads.set(4)
    outputFormats.set(['XML', 'HTML'])
    timestampedReports.set(false)
    mutationThreshold.set(80)
}

bootJar {
    archiveFileName = 'finrem-case-orchestration.jar'
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

pact {
    publish {
        pactDirectory = 'pacts'
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
        tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
        version = versions.pact_version
    }
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    description = "Runs smoke Tests"
    testClassesDirs = sourceSets.testSmoke.output.classesDirs
    classpath = sourceSets.testSmoke.runtimeClasspath
    finalizedBy aggregate
}

task functional(type: Test) {
    description = "Runs functional Tests"
    setTestClassesDirs(sourceSets.functional.output.classesDirs)
    setClasspath(sourceSets.functional.runtimeClasspath)
    finalizedBy aggregate
}

task contractTest(type: Test) {
    group = 'Delivery pipeline'
    description = 'Runs the consumer Pact tests'
    setTestClassesDirs(sourceSets.contract.output.classesDirs)
    setClasspath(sourceSets.contract.runtimeClasspath)
    systemProperty 'pact.rootDir', "pacts"
}

task runAndPublishConsumerPactTests(type: Test){
    dependsOn(contractTest)
    logger.lifecycle("Runs pact Tests")
    testClassesDirs = sourceSets.contract.output.classesDirs
    classpath = sourceSets.contract.runtimeClasspath
    finalizedBy(pactPublish)

}

static def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

task fortifyScan(type: JavaExec)  {
    mainClass.set("uk.gov.hmcts.fortifyclient.FortifyClientMainApp")
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

task buildCCDXlsx(type: Exec) {
    group 'ccd tasks'
    commandLine './bin/build-finrem-xlxs-definitions.sh'
}

bootWithCCD {
    dependsOn(buildCCDXlsx)

    doFirst() {
        project.file('./.aat-env').readLines().each() {
            def index = it.indexOf("=")
            def key = it.substring(0, index)
            def value = it.substring(index + 1)
            environment(key, value)
        }
    }

    //AAT or Local (IDAM and S2S Simulators)
    authMode = uk.gov.hmcts.rse.AuthMode.AAT

    environment("SERVICE_AUTH_MICROSERVICE", "finrem_case_orchestration")

    environment("FEATURE_MANAGE_BUNDLE", "true")
    environment("FEATURE_RESPONDENT_JOURNEY", "true")
    environment("FEATURE_ASSIGN_CASE_ACCESS", "false")
    environment("FEATURE_USE_USER_TOKEN", "true")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudBomVersion}"
        mavenBom "io.rest-assured:rest-assured-bom:${restAssuredBomVersion}"
    }
}

dependencies {
    implementation group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: versions.jaxbOsgi
    implementation group: 'com.jayway.jsonpath', name: 'json-path-assert', version: versions.jsonPathAssert
    implementation group: 'commons-io', name: 'commons-io', version: versions.commonsIo
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: versions.springDoc
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    implementation group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: versions.sonarPitest
    implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
    implementation group: 'io.github.openfeign', name: 'feign-jackson', version: versions.openfeign
    implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: versions.openfeign
    implementation group: 'io.github.openfeign.form', name: 'feign-form', version: versions.openfeignForm

    implementation group: 'com.github.hmcts', name:'idam-java-client', version: versions.idamClient

    implementation group: 'com.github.hmcts', name: 'ccd-client', version: versions.ccdClient
    implementation group: 'com.github.hmcts.java-logging', name: 'java-logging', version: versions.reformLogging
    implementation group: 'com.github.hmcts.java-logging', name: 'java-logging-appinsights', version: versions.reformLogging
    implementation group: 'com.github.hmcts.java-logging', name: 'java-logging-spring', version: versions.reformLogging
    implementation group: 'com.github.hmcts', name: 'properties-volume-spring-boot-starter', version: versions.propVolumeStarter
    implementation group: 'com.github.hmcts', name:'service-auth-provider-java-client', version: versions.serviceTokenGenerator

    implementation group: 'com.github.hmcts', name: 'bsp-common-lib', version: versions.bspCommonLib

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: versions.apacheLogging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: versions.apacheLogging

    developmentOnly group: 'org.springframework.boot', name: 'spring-boot-devtools'

    runtimeOnly group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    runtimeOnly group: 'org.springframework.boot', name: 'spring-boot-starter-web'

    testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: versions.wiremock
    testImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'

    testImplementation group: 'com.fasterxml.jackson.core', name:'jackson-databind'
    testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations'

    testImplementation("org.junit.vintage:junit-vintage-engine") {
        exclude group: "org.hamcrest", module: "hamcrest-core"
    }

    testSmokeImplementation group: 'io.rest-assured', name: 'rest-assured'
    testSmokeImplementation sourceSets.main.runtimeClasspath
    testSmokeImplementation sourceSets.test.runtimeClasspath

    testImplementation('com.github.hmcts:fortify-client:1.2.0:all')

    functionalImplementation group: 'io.jsonwebtoken', name: 'jjwt', version: versions.jjwt
    functionalImplementation group: 'io.rest-assured', name: 'rest-assured'
    functionalImplementation group: 'junit', name: 'junit', version: versions.junit

    functionalImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    functionalImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    functionalImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    functionalImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity

    functionalImplementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    functionalImplementation group: 'org.mockito', name: 'mockito-core', version: versions.mockito

    functionalImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    functionalImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'

    functionalImplementation group: 'org.apache.pdfbox', name: 'pdfbox', version: versions.pdfbox

    functionalImplementation group: 'com.fasterxml.jackson.core', name:'jackson-databind'
    functionalImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations'

    functionalImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    functionalImplementation group: 'org.skyscreamer', name: 'jsonassert', version: versions.skyscreamer
    functionalImplementation group: 'com.github.hmcts', name: 'ccd-client', version: versions.ccdClient
    functionalImplementation group: 'com.github.hmcts', name:'service-auth-provider-java-client', version: versions.serviceTokenGenerator

    functionalImplementation group: 'com.github.hmcts', name: 'bsp-common-lib', version: versions.bspCommonLib

    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    functionalAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    contractImplementation group: 'au.com.dius.pact.consumer', name: 'junit', version: versions.pact_version
    contractImplementation group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
    contractRuntimeOnly group: 'au.com.dius.pact.consumer', name: 'junit', version: versions.pact_version
    contractRuntimeOnly group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version

    contractImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'

    contractImplementation sourceSets.main.runtimeClasspath
    contractImplementation sourceSets.test.runtimeClasspath
}

