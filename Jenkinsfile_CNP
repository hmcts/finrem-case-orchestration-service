#!groovy
import uk.gov.hmcts.contino.AppPipelineDsl
import uk.gov.hmcts.contino.GithubAPI

@Library("Infrastructure")

def type = "java"
def product = "finrem"
def component = "cos"

def secrets = [
        'finrem-${env}': [
                secret("finrem-doc-s2s-auth-secret", "AUTH_PROVIDER_SERVICE_CLIENT_KEY"),
                secret("idam-secret" ,"OAUTH2_CLIENT_FINREM"),
                secret("username-solicitor","USERNAME-SOLICITOR"),
                secret("password-solicitor","PASSWORD-SOLICITOR"),
                secret("finrem-system-update-username", "FINREM_SYSTEMUPDATE_USERNAME"),
                secret("finrem-system-update-password", "FINREM_SYSTEMUPDATE_PASSWORD"),
                secret("finrem-idam-client-secret", "FINREM_IDAM_CLIENT_SECRET"),
                secret("docmosis-api-key", "PDF_SERVICE_ACCESS_KEY"),
                secret("docmosis-endpoint", "PDF_SERVICE_BASEURL"),
                secret("gov-uk-notification-key", "UK_GOV_NOTIFY_API_KEY")
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

def getProjectName() {
    String projectPrefix = "HMCTS_d_to_i/finrem-ccd-definitions/"
    def githubApi = new GithubAPI(this)
    for (label in githubApi.getLabelsbyPattern(env.BRANCH_NAME, "use-defs-pr-") ) {
        String prNumber = label.substring(12, label.length())
        return projectPrefix + "PR-" + prNumber
    }
    return projectPrefix + "master"
}

// Vars for Kubernetes
env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'

withPipeline(type, product, component) {
    loadVaultSecrets(secrets)

    afterSuccess('checkout') {
        step ([
                $class: 'CopyArtifact',
                selector: lastCompleted(),
                projectName: getProjectName(),
                target: "./definition_files"
        ]);
    }

    afterSuccess('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        publishHTML target: [
                reportDir            : "target/site/serenity/",
                reportFiles          : "index.html",
                reportName           : "AAT Functional Tests",
                alwaysLinkToLastBuild: true
        ]
    }

    afterSuccess('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        publishHTML target: [
                reportDir            : "target/site/serenity/",
                reportFiles          : "index.html",
                reportName           : "Preview Functional Tests",
                alwaysLinkToLastBuild: true
        ]
    }

    enableSlackNotifications('#finrem-dev')
    enableAksStagingDeployment()
    disableLegacyDeployment()

    onMaster() {
        enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
        env.JENKINS_BRANCH = "master"
    }

    onPR() {
        enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
        env.CCD_DEFS = getProjectName()
        env.JENKINS_BRANCH = "preview"
        println "Using CCD definitions from: " + env.CCD_DEFS
    }
}