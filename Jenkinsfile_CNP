#!groovy
import uk.gov.hmcts.contino.AppPipelineDsl
import uk.gov.hmcts.contino.GithubAPI

@Library("Infrastructure")

def type = "java"
def product = "finrem"
def component = "cos"

def secrets = [
        'finrem-${env}': [
                secret("finrem-doc-s2s-auth-secret", "AUTH_PROVIDER_SERVICE_CLIENT_KEY"),
                secret("idam-secret" ,"OAUTH2_CLIENT_FINREM"),
                secret("username-solicitor","USERNAME-SOLICITOR"),
                secret("password-solicitor","PASSWORD-SOLICITOR"),
                secret("finrem-system-update-username", "FINREM_SYSTEMUPDATE_USERNAME"),
                secret("finrem-system-update-password", "FINREM_SYSTEMUPDATE_PASSWORD"),
                secret("finrem-idam-client-secret", "FINREM_IDAM_CLIENT_SECRET")
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

def labels = [
    "enable_security_scan",
    "enable_mutation_test",
    "enable_fortify_scan",
]

def populateLabelStates(labels) {
    def states = [:]
    // Get labels from GitHub repo
    def repoLabels = new GithubAPI(this).getLabelsbyPattern(env.BRANCH_NAME, "enable_")

    // Check existence of provided label, and store in states map
    def getLabelState = { label ->
        if (label == "atLeastOneEnabled") {
            return
        }
        def labelExists = repoLabels.contains(label) ? true : false
        states.put(label, labelExists)
    }

    // Iterate over labels List to build labelStates map
    labels.each { label -> getLabelState(label) }

    // Hardcode enable_all_tests_and_scans label
    if (!states.containsKey("enable_all_tests_and_scans")) {
        getLabelState("enable_all_tests_and_scans")
    }

    // Check if at least one label is true
    states.put("atLeastOneEnabled", states.any {key, value -> value == true })

    return states
}
labelStates = populateLabelStates(labels)

def checkLabel(label) {
    return (labelStates.enable_all_tests_and_scans || labelStates.get(label))
}

// Vars for Kubernetes
env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'

withPipeline(type, product, component) {
    loadVaultSecrets(secrets)

    after('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        publishHTML target: [
                reportDir            : "target/site/serenity/",
                reportFiles          : "index.html",
                reportName           : "AAT Functional Tests",
                alwaysLinkToLastBuild: true
        ]

    }

    after('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        publishHTML target: [
                reportDir            : "target/site/serenity/",
                reportFiles          : "index.html",
                reportName           : "Preview Functional Tests",
                alwaysLinkToLastBuild: true
        ]
    }

    enableSlackNotifications('#finrem-dev')
    enableAksStagingDeployment()
    disableLegacyDeployment()

    onMaster() {
        enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
    }

    onPR() {
        enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
    }
}

if (checkLabel("atLeastOneEnabled")) {
    properties([
        parameters([
            string(name: 'URL_TO_TEST', defaultValue: "https://${product}-${component}-pr-${CHANGE_ID}.service.core-compute-preview.internal",
                description: 'The URL you want to run these tests against'),
            string(name: 'SecurityRules',
                defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/2366efe631a60672ff8d0698bd9cb07f0e878faa/conf/security-rules.conf',
                description: 'The URL you want to run these tests against'),

        ])
    ])

    withNightlyPipeline(type, product, component) {
        onPR() {
            env.TEST_URL = params.URL_TO_TEST
            env.Rules = params.SecurityRules
            if (checkLabel("enable_security_scan")) {
                enableSecurityScan()
            }
            if (checkLabel("enable_mutation_test")) {
                enableMutationTest()
            }
            if (checkLabel("enable_fortify_scan")) {
                enableFortifyScan()

                after('fortify-scan') {
                    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
                }
            }
        }
    }
}
