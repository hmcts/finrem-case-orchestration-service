#!groovy
import uk.gov.hmcts.contino.AppPipelineDsl
import uk.gov.hmcts.contino.GithubAPI

@Library("Infrastructure")

def type = "java"
def product = "finrem"
def app = "cos"

def secrets = [
        'finrem-${env}': [
                secret("finrem-doc-s2s-auth-secret", "AUTH_PROVIDER_SERVICE_CLIENT_KEY"),
                secret("idam-secret" ,"OAUTH2_CLIENT_FINREM"),
                secret("username-solicitor","USERNAME-SOLICITOR"),
                secret("password-solicitor","PASSWORD-SOLICITOR"),
                secret("finrem-system-update-username", "FINREM_SYSTEMUPDATE_USERNAME"),
                secret("finrem-system-update-password", "FINREM_SYSTEMUPDATE_PASSWORD"),
                secret("finrem-idam-client-secret", "FINREM_IDAM_CLIENT_SECRET")
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

def checkForLabel(branch_name, test_name) {
    if (new GithubAPI(this).getLabelsbyPattern(branch_name, "enable").contains(test_name)) {
        return true;
    }
    return false;
}

def labelMap = [
    enableAll: [
        label: "enable_all",
        exists: false
    ],
    securityScan: [
        label: "enable_security_scan",
        exists: false
    ],
    mutationTest: [
        label: "enable_mutation_test",
        exists: false
    ],
    fortifyScan: [
        label: "enable_fortify_scan",
        exists: false
    ]
]

def checkLabels(branch_name) {
    labelMap.each { label ->
        label.value.exists = checkForLabel(branch_name, label.value.label)
    }
}

// Vars for Kubernetes
env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'

withPipeline(type, product, app) {
    loadVaultSecrets(secrets)

    after('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        publishHTML target: [
                reportDir            : "target/site/serenity/",
                reportFiles          : "index.html",
                reportName           : "AAT Functional Tests",
                alwaysLinkToLastBuild: true
        ]

    }

    after('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        publishHTML target: [
                reportDir            : "target/site/serenity/",
                reportFiles          : "index.html",
                reportName           : "Preview Functional Tests",
                alwaysLinkToLastBuild: true
        ]
    }

    enableSlackNotifications('#finrem-dev')
    enableAksStagingDeployment()
    disableLegacyDeployment()

    onMaster() {
        enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
    }

    onPR() {
        checkLabels(env.BRANCH_NAME)
        def enableAll = labelList.enableAll.exists
        def securityScan = labelList.securityScan.exists
        def mutationTest = labelList.mutationTest.exists
        def fortifyScan = labelList.fortifyScan.exists
        enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
        if (enableAll || securityScan || mutationTest || fortifyScan) {
            properties([
                parameters([
                    string(name: 'URL_TO_TEST', defaultValue: 'http://finrem-cos-aat.service.core-compute-aat.internal',
                        description: 'The URL you want to run these tests against'),
                    string(name: 'SecurityRules',
                        defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/2366efe631a60672ff8d0698bd9cb07f0e878faa/conf/security-rules.conf',
                        description: 'The URL you want to run these tests against'),

                ])
            ])

            env.TEST_URL = params.URL_TO_TEST
            env.Rules = params.SecurityRules
        }
        if (enableAll || securityScan) {
            enableSecurityScan()
        }
        if (enableAll || mutationTest) {
            enableMutationTest()
        }
        if (enableAll || fortifyScan) {
            enableFortifyScan()

            after('fortify-scan') {
                steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
            }
        }
    }
}

if (checkForLabel(env.BRANCH_NAME, 'run_nightly')) {
    properties([
        pipelineTriggers([cron('H 23 * * *')]),
        parameters([
            string(name: 'URL_TO_TEST', defaultValue: 'http://finrem-cos-aat.service.core-compute-aat.internal',
                description: 'The URL you want to run these tests against'),
            string(name: 'SecurityRules',
                defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/2366efe631a60672ff8d0698bd9cb07f0e878faa/conf/security-rules.conf',
                description: 'The URL you want to run these tests against'),

        ])
    ])

    withNightlyPipeline(type, product, app) {
        env.TEST_URL = params.URL_TO_TEST
        env.Rules = params.SecurityRules
        enableSecurityScan()
        enableMutationTest()
        enableFortifyScan()

        after('fortify-scan') {
            steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
        }
    }
}
